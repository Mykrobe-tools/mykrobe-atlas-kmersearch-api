# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class SearchResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percent_kmers_found=None, num_kmers_found=None, num_kmers=None, sample_name=None):  # noqa: E501
        """SearchResult - a model defined in OpenAPI

        :param percent_kmers_found: The percent_kmers_found of this SearchResult.  # noqa: E501
        :type percent_kmers_found: float
        :param num_kmers_found: The num_kmers_found of this SearchResult.  # noqa: E501
        :type num_kmers_found: int
        :param num_kmers: The num_kmers of this SearchResult.  # noqa: E501
        :type num_kmers: int
        :param sample_name: The sample_name of this SearchResult.  # noqa: E501
        :type sample_name: str
        """
        self.openapi_types = {
            'percent_kmers_found': float,
            'num_kmers_found': int,
            'num_kmers': int,
            'sample_name': str
        }

        self.attribute_map = {
            'percent_kmers_found': 'percent_kmers_found',
            'num_kmers_found': 'num_kmers_found',
            'num_kmers': 'num_kmers',
            'sample_name': 'sample_name'
        }

        self._percent_kmers_found = percent_kmers_found
        self._num_kmers_found = num_kmers_found
        self._num_kmers = num_kmers
        self._sample_name = sample_name

    @classmethod
    def from_dict(cls, dikt) -> 'SearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SearchResult of this SearchResult.  # noqa: E501
        :rtype: SearchResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percent_kmers_found(self):
        """Gets the percent_kmers_found of this SearchResult.


        :return: The percent_kmers_found of this SearchResult.
        :rtype: float
        """
        return self._percent_kmers_found

    @percent_kmers_found.setter
    def percent_kmers_found(self, percent_kmers_found):
        """Sets the percent_kmers_found of this SearchResult.


        :param percent_kmers_found: The percent_kmers_found of this SearchResult.
        :type percent_kmers_found: float
        """

        self._percent_kmers_found = percent_kmers_found

    @property
    def num_kmers_found(self):
        """Gets the num_kmers_found of this SearchResult.


        :return: The num_kmers_found of this SearchResult.
        :rtype: int
        """
        return self._num_kmers_found

    @num_kmers_found.setter
    def num_kmers_found(self, num_kmers_found):
        """Sets the num_kmers_found of this SearchResult.


        :param num_kmers_found: The num_kmers_found of this SearchResult.
        :type num_kmers_found: int
        """

        self._num_kmers_found = num_kmers_found

    @property
    def num_kmers(self):
        """Gets the num_kmers of this SearchResult.


        :return: The num_kmers of this SearchResult.
        :rtype: int
        """
        return self._num_kmers

    @num_kmers.setter
    def num_kmers(self, num_kmers):
        """Sets the num_kmers of this SearchResult.


        :param num_kmers: The num_kmers of this SearchResult.
        :type num_kmers: int
        """

        self._num_kmers = num_kmers

    @property
    def sample_name(self):
        """Gets the sample_name of this SearchResult.


        :return: The sample_name of this SearchResult.
        :rtype: str
        """
        return self._sample_name

    @sample_name.setter
    def sample_name(self, sample_name):
        """Sets the sample_name of this SearchResult.


        :param sample_name: The sample_name of this SearchResult.
        :type sample_name: str
        """

        self._sample_name = sample_name
